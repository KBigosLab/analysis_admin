
var Fiber = require('fibers');

// Optionally include scrypt encryption. This should not be optional on the
// live server, but some dev systems have trouble installing scrypt so this
// is a workaround.
if (!Const.noScryptEncryption) {

  var scrypt = require('scrypt');

  exports.hash = function(password, maxtime) {
    // Lowercase "fiber" will now reference the currently running fiber
    var fiber = Fiber.current;

    var res = null;
    scrypt.passwordHash(password, maxtime, function(err, pwdhash) {
      if (!err) res = pwdhash;

      // This kicks the execution back to where the Fiber.yield() statement stopped it
      fiber.resume();
    });

    // Yield so the server can do something else, since fs access is slow!
    Fiber.yield();

    // This doesn't happen until the callback calls fiber.run() above.
    return res;
  }

  exports.verify = function(hash,password) {
    // Lowercase "fiber" will now reference the currently running fiber
    var fiber = Fiber.current;

    var res = false;
    scrypt.verifyHash(hash, password, function(err, result) {
      if (!err) res = result;

      // This kicks the execution back to where the Fiber.yield() statement stopped it
      fiber.resume();
    });

    // Yield so the server can do something else, since fs access is slow!
    Fiber.yield();

    // This doesn't happen until the callback calls fiber.run() above.
    return res;
  }

} else {

  var md5 = require('MD5');

  exports.hash = function(password) {
    return md5(password);
  }

  exports.verify = function(hash,password) {
    return hash == md5(password);
  }
}

